"C_175"=	pltte1[25])
cell_name <- Explosion_Cell_total[1]
Merge_df_tmp <- Merge_df %>% filter(Item_No ==cell_name)
File_Num <- unique(Merge_df_tmp$File_num)
cat(cell_name,"의 연소 건수",length(File_Num),"건","\n")
for (loop in File_Num) {
tmp_df <- Merge_df_tmp %>% filter(File_num==loop)
cat("연소발생일 : ",tmp_df$연소발생일[1])
if(is.na(unique(tmp_df$연소발생일)[2])==FALSE){
cat("연소발생일 : ",tmp_df$연소발생일[2])
}
Explosion_Cell <- unique(tmp_df$Item_No)
Explosion_Time <- unique(tmp_df$GROUP_endtime)
tmp_df$Time <- as.POSIXct(tmp_df$Time, origin="1899-12-30", tz="GMT")
tmp_df$액보충시간 <- as.POSIXct(tmp_df$액보충시간, origin="1899-12-30", tz="GMT")
p <- ggplot(tmp_df, aes(x = anytime(Time) , y = Plates전류합)) + theme_bw() +
geom_line(position = "identity", alpha = 0.2, bins = 50) +
xlab("Time")+ylab("Plates전류합")+
geom_vline(data = tmp_df, aes(xintercept = 액보충시간)) +
geom_text( aes(x = 액보충시간, y = 0, label = c("액보충시간")))
p <- p + coord_cartesian()+ ggtitle(paste0(Explosion_Cell,"_",Explosion_Time,"_전류"))
print(p)
tmp_df <- Merge_df_tmp %>% filter(File_num==loop)
Explosion_Cell <- unique(tmp_df$Item_No)
Explosion_Time <- unique(tmp_df$GROUP_endtime)
tmp <- colSums(as.data.frame(lapply(tmp_df[,63:87], as.integer)) ,na.rm = FALSE, dims = 1)
Explosion_Plate <- names(tmp[which(tmp>0)])
#전체 연소 Plate 확인
Explosion_Plate_total <- NULL
for (j in 1:length(Explosion_Plate)){
Explosion_Plate_total <- paste(Explosion_Plate_total,Explosion_Plate[j],sep=" ")
}
tmp_df1 <- tmp_df[,c(1:5,31:55,56:58,62)]
tmp_df1 <- tmp_df1 %>% gather(Collector_num,Presure,Collector_압력_151:Collector_압력_175)
tmp_df1$Num <- str_split_fixed(tmp_df1$Collector_num, fixed("_"), 3)[, 3]
tmp_df1$Collector_num <- NULL
tmp_df2 <- tmp_df[,c(1:30,56:58,62)]
tmp_df2 <- tmp_df2 %>% gather(Plate_num,Current,Plate_전류_151:Plate_전류_175)
tmp_df2$Num <- str_split_fixed(tmp_df2$Plate_num, fixed("_"), 3)[, 3]
tmp_df2$Plate_num <- NULL
tmp_df <- merge(tmp_df1, tmp_df2, by = c("File_num","Item_No","연소여부","Time","전류","Plates전류합","액보충시간","GROUP_endtime","GROUP_starttime", "Num")) %>%
arrange(Time);#rm(tmp_df1,tmp_df2)
tmp_df$Plate_num <- paste0("P_",tmp_df$Num)
tmp_df$Collector_num <- paste0("C_",tmp_df$Num)
tmp_df$Num <- NULL
tmp_df$Time <- as.POSIXct(tmp_df$Time, origin="1899-12-30", tz="GMT")
tmp_df$액보충시간 <- as.POSIXct(tmp_df$액보충시간, origin="1899-12-30", tz="GMT")
#연소발생 1시간전 상위Rank+최하Rank+연소 Plate 선별 Drawing
Flag_Time <- as.POSIXct(Explosion_Time,origin="1899-12-30",tz="GMT") + as.difftime(-1, unit="hours")
Tmp_df1 <- tmp_df %>%
filter(Time == Flag_Time) %>%
arrange(desc(Current)) %>%
add_column(Rank=1:25,.before = 'Plate_num') %>%
filter((Rank>=1 & Rank<=5)|Rank==25)
Select_Plate <- Tmp_df1$Plate_num;rm(Tmp_df1)
tmp_df <- tmp_df %>% filter(tmp_df[,'Plate_num'] %in% c(Select_Plate, Explosion_Plate))
min_current <- min(tmp_df$Current, na.rm = T)
max_current <- max(tmp_df$Current, na.rm = T)
min_pressure <- min(tmp_df$Presure, na.rm = T)
max_pressure <- max(tmp_df$Presure, na.rm = T)
p <- ggplot(tmp_df,aes(x=Time,y=Current,group=Plate_num)) + ylim(min_current,max_current) +
geom_line(aes(color=Plate_num))+xlab("Time")+ylab("Plate_Current") +
guides(color = guide_legend(override.aes = list(size = 5))) + scale_color_manual(values=color)
p <- p + coord_cartesian()+ ggtitle(paste0(Explosion_Cell,"_",Explosion_Time)) +
geom_vline(data = tmp_df, aes(xintercept = 액보충시간))+
geom_text(data = tmp_df, aes(x = 액보충시간, y = 0, label = c("액보충시간"))) +
labs(subtitle =  paste0("Explosion Plate is ",Explosion_Plate_total,"\n"))
print(p)
p <- ggplot(tmp_df,aes(x=Time,y=Presure,group=Plate_num)) + ylim(min_pressure,max_pressure) +
geom_line(aes(color=Plate_num))+xlab("Time")+ylab("Collector_Presure")+
guides(color = guide_legend(override.aes = list(size = 5))) + scale_color_manual(values=color_P)
p <- p + coord_cartesian()+ ggtitle(paste0(Explosion_Cell,"_",Explosion_Time)) +
geom_vline(data = tmp_df, aes(xintercept = 액보충시간))+
geom_text(data = tmp_df, aes(x = 액보충시간, y = 0, label = c("액보충시간"))) +
labs(subtitle =  paste0("Explosion Plate is ",Explosion_Plate_total,"\n")) + scale_color_manual(values=color_P)
print(p)
# p <- ggplot(tmp_df,aes(x=Time,y=Current,group=Plate_num)) + ylim(min_current,max_current) +
#     geom_line(aes(color=Plate_num))+xlab("Time")+ylab("Plate_Current") +
#     theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
#
# p <- p + coord_cartesian()+ ggtitle(paste0(Explosion_Cell,"_",Explosion_Time)) +
#     geom_vline(data = tmp_df, aes(xintercept = 액보충시간))+
#     geom_text(data = tmp_df, aes(x = 액보충시간, y = 0, label = c("액보충시간"))) +
#     labs(subtitle =  paste0("Explosion Plate is ",Explosion_Plate_total,"\n"))
#
#
# q <- ggplot(tmp_df,aes(x=Time,y=Presure,group=Plate_num)) + ylim(min_pressure,max_pressure) +
#     geom_line(aes(color=Plate_num))+xlab("Time")+ylab("Collector_Presure")
# q <- q + coord_cartesian()+
#     geom_vline(data = tmp_df, aes(xintercept = 액보충시간))+
#     geom_text(data = tmp_df, aes(x = 액보충시간, y = 0, label = c("액보충시간")))
#
# grid.arrange(p,q,nrow=2)
}
cell_name <- Explosion_Cell_total[1]
Merge_df_tmp <- Merge_df %>% filter(Item_No ==cell_name)
File_Num <- unique(Merge_df_tmp$File_num)
cat(cell_name,"의 연소 건수",length(File_Num),"건","\n")
for (loop in File_Num) {
tmp_df <- Merge_df_tmp %>% filter(File_num==loop)
cat("연소발생일 : ",tmp_df$연소발생일[1])
if(is.na(unique(tmp_df$연소발생일)[2])==FALSE){
cat("연소발생일 : ",tmp_df$연소발생일[2])
}
Explosion_Cell <- unique(tmp_df$Item_No)
Explosion_Time <- unique(tmp_df$GROUP_endtime)
tmp_df$Time <- as.POSIXct(tmp_df$Time, origin="1899-12-30", tz="GMT")
tmp_df$액보충시간 <- as.POSIXct(tmp_df$액보충시간, origin="1899-12-30", tz="GMT")
p <- ggplot(tmp_df, aes(x = anytime(Time) , y = Plates전류합)) + theme_bw() +
geom_line(position = "identity", alpha = 0.2, bins = 50) +
xlab("Time")+ylab("Plates전류합")+
geom_vline(data = tmp_df, aes(xintercept = 액보충시간)) +
geom_text( aes(x = 액보충시간, y = 0, label = c("액보충시간")))
p <- p + coord_cartesian()+ ggtitle(paste0(Explosion_Cell,"_",Explosion_Time,"_전류"))
print(p)
tmp_df <- Merge_df_tmp %>% filter(File_num==loop)
Explosion_Cell <- unique(tmp_df$Item_No)
Explosion_Time <- unique(tmp_df$GROUP_endtime)
tmp <- colSums(as.data.frame(lapply(tmp_df[,63:87], as.integer)) ,na.rm = FALSE, dims = 1)
Explosion_Plate <- names(tmp[which(tmp>0)])
#전체 연소 Plate 확인
Explosion_Plate_total <- NULL
for (j in 1:length(Explosion_Plate)){
Explosion_Plate_total <- paste(Explosion_Plate_total,Explosion_Plate[j],sep=" ")
}
tmp_df1 <- tmp_df[,c(1:5,31:55,56:58,62)]
tmp_df1 <- tmp_df1 %>% gather(Collector_num,Presure,Collector_압력_151:Collector_압력_175)
tmp_df1$Num <- str_split_fixed(tmp_df1$Collector_num, fixed("_"), 3)[, 3]
tmp_df1$Collector_num <- NULL
tmp_df2 <- tmp_df[,c(1:30,56:58,62)]
tmp_df2 <- tmp_df2 %>% gather(Plate_num,Current,Plate_전류_151:Plate_전류_175)
tmp_df2$Num <- str_split_fixed(tmp_df2$Plate_num, fixed("_"), 3)[, 3]
tmp_df2$Plate_num <- NULL
tmp_df <- merge(tmp_df1, tmp_df2, by = c("File_num","Item_No","연소여부","Time","전류","Plates전류합","액보충시간","GROUP_endtime","GROUP_starttime", "Num")) %>%
arrange(Time);#rm(tmp_df1,tmp_df2)
tmp_df$Plate_num <- paste0("P_",tmp_df$Num)
tmp_df$Collector_num <- paste0("C_",tmp_df$Num)
tmp_df$Num <- NULL
tmp_df$Time <- as.POSIXct(tmp_df$Time, origin="1899-12-30", tz="GMT")
tmp_df$액보충시간 <- as.POSIXct(tmp_df$액보충시간, origin="1899-12-30", tz="GMT")
#연소발생 1시간전 상위Rank+최하Rank+연소 Plate 선별 Drawing
Flag_Time <- as.POSIXct(Explosion_Time,origin="1899-12-30",tz="GMT") + as.difftime(-1, unit="hours")
Tmp_df1 <- tmp_df %>%
filter(Time == Flag_Time) %>%
arrange(desc(Current)) %>%
add_column(Rank=1:25,.before = 'Plate_num') %>%
filter((Rank>=1 & Rank<=5)|Rank==25)
Select_Plate <- Tmp_df1$Plate_num;rm(Tmp_df1)
tmp_df <- tmp_df %>% filter(tmp_df[,'Plate_num'] %in% c(Select_Plate, Explosion_Plate))
min_current <- min(tmp_df$Current, na.rm = T)
max_current <- max(tmp_df$Current, na.rm = T)
min_pressure <- min(tmp_df$Presure, na.rm = T)
max_pressure <- max(tmp_df$Presure, na.rm = T)
p <- ggplot(tmp_df,aes(x=Time,y=Current,group=Plate_num)) + ylim(min_current,max_current) +
geom_line(aes(color=Plate_num))+xlab("Time")+ylab("Plate_Current") +
scale_color_manual(values=color_P)
p <- p + coord_cartesian()+ ggtitle(paste0(Explosion_Cell,"_",Explosion_Time)) +
geom_vline(data = tmp_df, aes(xintercept = 액보충시간))+
geom_text(data = tmp_df, aes(x = 액보충시간, y = 0, label = c("액보충시간"))) +
labs(subtitle =  paste0("Explosion Plate is ",Explosion_Plate_total,"\n"))
print(p)
p <- ggplot(tmp_df,aes(x=Time,y=Presure,group=Plate_num)) + ylim(min_pressure,max_pressure) +
geom_line(aes(color=Plate_num))+xlab("Time")+ylab("Collector_Presure")+
scale_color_manual(values=color_C)
p <- p + coord_cartesian()+ ggtitle(paste0(Explosion_Cell,"_",Explosion_Time)) +
geom_vline(data = tmp_df, aes(xintercept = 액보충시간))+
geom_text(data = tmp_df, aes(x = 액보충시간, y = 0, label = c("액보충시간"))) +
labs(subtitle =  paste0("Explosion Plate is ",Explosion_Plate_total,"\n"))
print(p)
# p <- ggplot(tmp_df,aes(x=Time,y=Current,group=Plate_num)) + ylim(min_current,max_current) +
#     geom_line(aes(color=Plate_num))+xlab("Time")+ylab("Plate_Current") +
#     theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
#
# p <- p + coord_cartesian()+ ggtitle(paste0(Explosion_Cell,"_",Explosion_Time)) +
#     geom_vline(data = tmp_df, aes(xintercept = 액보충시간))+
#     geom_text(data = tmp_df, aes(x = 액보충시간, y = 0, label = c("액보충시간"))) +
#     labs(subtitle =  paste0("Explosion Plate is ",Explosion_Plate_total,"\n"))
#
#
# q <- ggplot(tmp_df,aes(x=Time,y=Presure,group=Plate_num)) + ylim(min_pressure,max_pressure) +
#     geom_line(aes(color=Plate_num))+xlab("Time")+ylab("Collector_Presure")
# q <- q + coord_cartesian()+
#     geom_vline(data = tmp_df, aes(xintercept = 액보충시간))+
#     geom_text(data = tmp_df, aes(x = 액보충시간, y = 0, label = c("액보충시간")))
#
# grid.arrange(p,q,nrow=2)
}
rm(list=ls())
# 00. environment -------------------------------------------------------------
#packages
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
if(!require(tidyr)) install.packages('tidyr'); require(tidyr)
if(!require(tidyverse)) install.packages('tidyverse'); require(tidyverse)
#directory - R_code
print(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Rdata load
load(file="../0.Data/N3_RData/info_data.Rdata")
View(info_df)
tmp <- info_df[!is.na(info_df$Z.PI_Plates_mean),]
tmp1 <- tmp %>% filter(y=="1")
hist(tmp1$Z.PI_Plates_mean,breaks=1000)
tmp2 <- tmp %>% filter(y!="1" )
hist(tmp2$Z.PI_Plates_mean,breaks=1000)
tmp <- info_df[!is.na(info_df$IR_Plates_mean),]
tmp1 <- tmp %>% filter(y=="1")
hist(tmp1$IR_Plates_mean,breaks=1000)
tmp2 <- tmp %>% filter(y!="1" )
hist(tmp2$IR_Plates_mean,breaks=1000)
tmp <- info_df[!is.na(info_df$PI_Plates_mean),]
tmp1 <- tmp %>% filter(y=="1")
hist(tmp1$PI_Plates_mean,breaks=1000)
tmp2 <- tmp %>% filter(y!="1" )
hist(tmp2$PI_Plates_mean,breaks=1000)
tmp <- info_df[!is.na(info_df$PI_Plates_sd),]
tmp1 <- tmp %>% filter(y=="1")
hist(tmp1$PI_Plates_sd,breaks=1000)
tmp2 <- tmp %>% filter(y!="1" )
hist(tmp2$PI_Plates_sd,breaks=1000)
rm(list=ls())
# 00. environment -------------------------------------------------------------
#packages
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
if(!require(tidyr)) install.packages('tidyr'); require(tidyr)
if(!require(tidyverse)) install.packages('tidyverse'); require(tidyverse)
if(!require(lubridate)) install.packages('lubridate'); require(lubridate)
#directory - R_code
print(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("../R_code/Plot_lib.R")
source("../R_code/R_function.R")
# 01. raw data ---------------------------
#directory - DATA
setwd("../0.Data")
getwd()
# N3 연소발생여부 데이터
N3_Explosion_DF <- as.data.frame(read.csv("N3 20년 연소 Cell_Collector NO_수정.csv", header = TRUE))
N3_Explosion_DF <- as.data.frame(sapply(N3_Explosion_DF, function(x) {ifelse(is.na(x)|x==3,0,x)}))
# N3 Tag 데이터
N3_Tag_DF <- as.data.frame(read.csv("N-3 Tag NO.csv", header = TRUE))
# N3 연소/비연소 분데이터
setwd("./N3_Data")
# 폴더 list / 폴더 설정
fdr.name <- list.files()
# 연소/비연소 전체 Cell에 대한 min data
File.num <- 0
raw_df <- NULL
# fdr <- 19
# I-U cell 양극ProcessGas_VV tag 오류로 해당변수 삭제
# raw_df <- raw_df[,-65]
for (fdr in 1: length(fdr.name)){
# 폴더의 fileList / order
fileList <- list.files(path=fdr.name[fdr])
num.sort <- as.numeric(gsub("[^\\d]+", "\\1", fileList, perl = TRUE))
fileList <- fileList[order(num.sort)]
# 폴더 이름 str, 각각 마지막 글자 따서 cell 이름 출력
Cell <- NULL
tmpstr <- unlist(strsplit(fdr.name[fdr],split='_', fixed=TRUE))[2]
tmpstr <- unlist(strsplit(tmpstr,split='-', fixed=TRUE))
Cell <- paste0(substr(tmpstr[1], 2, 3),"-",gsub('\\d','', tmpstr[2]));rm(tmpstr)
# cell Tag name
Tagname_df <-  N3_Tag_DF %>% filter(Item_No==Cell)
Cell_df <-  NULL
File.num <- 0
# fdr 폴더 내 파일 읽어와서 full data 만드는 loop
for(i in 1:length(fileList)){
tmp_df <-as.data.frame(read.csv(paste0(fdr.name[fdr],"/",fileList[i]),fill=TRUE,na.strings=c(NA,""),check.names=FALSE))
tmp_df <- cbind(File_num=File.num, tmp_df); flush.console;
# Tag name 변수명 변경하는 loop
for (j in 3:ncol(tmp_df)) {
names(tmp_df)[j] <- return_CName_chr(Tagname_df,names(tmp_df)[j])
}
names(tmp_df)[2] <- "Time"
#tibble package
tmp_df <- tmp_df %>%
add_column("Item_No" = Cell, .before = 'Time')
# I-U cell 양극ProcessGas_VV tag 오류로 해당변수 삭제
tmp_df <- tmp_df[,-65]
Cell_df <- rbind(Cell_df,tmp_df)
File.num <- File.num + 1;
}
raw_df <- rbind(raw_df,Cell_df)
}
# data type numeric / factor
Column_name <- c("Item_No", "Time", "액투입라인_VV", "양극ProcessGas_VV")
#numeric 변수가 character 인 경우 있는지 확인하는 코드
tmp_numvar <- raw_df[,-which(colnames(raw_df)%in%Column_name)]
str(tmp_numvar) #all numeric
col_err <- c()
row <- c()
for (i in 1:ncol(tmp_numvar)){
if(is.character(tmp_numvar[,i])==TRUE) {
cat("character column is ",colnames(tmp_numvar)[i],"\n")
col_err <- i
for (j in 1:nrow(tmp_numvar)){
row[j] <- (str_detect(tmp_numvar[j,i],"\\d") | is.na(tmp_numvar[j,i]) )
}
}
}
numvar_err <- raw_df[row==FALSE,];rm(tmp_numvar)
#type 확인
str(raw_df)
# Time format 변경
raw_df$Time <- as.POSIXct(raw_df$Time, origin="1899-12-30", tz="GMT")
raw_df$Time <- format(raw_df$Time,format='%Y-%m-%d %H:%M')
# data 양쪽에 빈칸 있는경우 있어서 없애는 function ex) "G-S" != "G-s "
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
raw_df$Item_No <- trim(raw_df$Item_No)
N3_Explosion_DF$Item_No <- trim(N3_Explosion_DF$Item_No)
# cell 이름 소문자를 대문자로 변환
raw_df[,'Item_No'] <- toupper(raw_df[,'Item_No'])
N3_Explosion_DF[,'Item_No'] <- toupper(N3_Explosion_DF[,'Item_No'])
# raw_data save -----------------------------------------------------------
save(raw_df,N3_Explosion_DF, file = "D:/4.Cell Plate 운전표준수립/YU_JISU/0.Data/N3_RData/raw_data.Rdata")
rm(list=ls())
dddd <- load(file="D:/4.Cell Plate 운전표준수립/YU_JISU/0.Data/N3_RData/raw_data.Rdata")
colnames(raw_df)
View(raw_df)
# 연소 별 start,endtime column 생성
raw_tmp <- raw_df %>%
group_by(File_num,Item_No) %>%
mutate(GROUP_starttime = min(Time)) %>%
mutate(GROUP_endtime = max(Time)) %>%
ungroup
raw_tmp <- raw_tmp %>%
mutate(y_date = ymd_hm(GROUP_endtime)) %>%
mutate(Time = ymd_hm(Time))
View(raw_tmp)
# N3 연소발생여부 data에서 Monel Type filtering
N3_Explosion_tmp <- N3_Explosion_DF %>%
mutate(y=1, y_date=ymd_hm(연소발생일),액보충시간=ymd_hm(액보충시간)) %>%
filter(Cell종류=="Monel") %>%
select(-c('연소발생월','연소발생일','Cell종류'))
colnames(raw_df)
colnames(raw_df)
IRs <- colnames(raw_df)[5:29]
# plates 전류합 column 생성
raw_df$Plates전류합<-rowSums(raw_df[,c(IRs)], na.rm = TRUE)
# 연소 별 start,endtime column 생성
raw_tmp <- raw_df %>%
group_by(File_num,Item_No) %>%
mutate(GROUP_starttime = min(Time)) %>%
mutate(GROUP_endtime = max(Time)) %>%
ungroup
raw_tmp <- raw_tmp %>%
mutate(y_date = ymd_hm(GROUP_endtime)) %>%
mutate(Time = ymd_hm(Time))
# N3 연소발생여부 data에서 Monel Type filtering
N3_Explosion_tmp <- N3_Explosion_DF %>%
mutate(y=1, y_date=ymd_hm(연소발생일),액보충시간=ymd_hm(액보충시간)) %>%
filter(Cell종류=="Monel") %>%
select(-c('연소발생월','연소발생일','Cell종류'))
View(N3_Explosion_tmp)
merge_tmp <- merge(raw_tmp, N3_Explosion_tmp,
by= c('Item_No','y_date'), all.x = TRUE)
colnames(N3_Explosion_DF)
Plates <- colnames(N3_Explosion_DF)[6:30]
Plates
rm(list=ls())
dddd <- load(file="D:/4.Cell Plate 운전표준수립/YU_JISU/0.Data/N3_RData/raw_data.Rdata")
colnames(raw_df)
IRs <- colnames(raw_df)[5:29]
IRs
IRs <- colnames(raw_df)[5:29]
colnames(N3_Explosion_DF)
Plates <- colnames(N3_Explosion_DF)[6:30]
Plates
# plates 전류합 column 생성
raw_df$Plates전류합<-rowSums(raw_df[,c(IRs)], na.rm = TRUE)
# 연소 별 start,endtime column 생성
raw_tmp <- raw_df %>%
group_by(File_num,Item_No) %>%
mutate(GROUP_starttime = min(Time)) %>%
mutate(GROUP_endtime = max(Time)) %>%
ungroup
raw_tmp <- raw_tmp %>%
mutate(y_date = ymd_hm(GROUP_endtime)) %>%
mutate(Time = ymd_hm(Time))
View(raw_tmp)
# N3 연소발생여부 data에서 Monel Type filtering
N3_Explosion_tmp <- N3_Explosion_DF %>%
mutate(y=1, y_date=ymd_hm(연소발생일),액보충시간=ymd_hm(액보충시간)) %>%
filter(Cell종류=="Monel") %>%
select(-c('연소발생월','연소발생일','Cell종류'))
View(raw_tmp)
merge_tmp <- merge(raw_tmp, N3_Explosion_tmp,
by= c('Item_No','y_date'), all.x = TRUE)
View(merge_tmp)
merge_tmp[,c(Plates,y)] <-  sapply(merge_tmp[,c(Plates,y)], function(x) {ifelse(is.na(x),0,x)})
merge_tmp[,c(Plates,"y")] <-  sapply(merge_tmp[,c(Plates,"y")], function(x) {ifelse(is.na(x),0,x)})
View(merge_tmp)
total_df <- merge_tmp  %>%
select(c('File_num','Item_No','y_date','y',everything())) %>%
arrange('File_num','Item_No','Time')
str(total_df)
# total_data save ---------------------------------------------------------
save(total_df,file = "D:/4.Cell Plate 운전표준수립/YU_JISU/0.Data/N3_RData/total_data.Rdata")
rm(list=ls())
load(file="D:/4.Cell Plate 운전표준수립/YU_JISU/0.Data/N3_RData/total_data.Rdata")
tmp <- total_df %>% select(c('File_num','Item_No','y_date','y','액보충시간'))
View(tmp)
View(total_df)
tmp <- total_df %>% select(c('File_num','Item_No','y_date','y','액보충시간'))
tmp <- tmp[!duplicated(tmp), ] %>%
arrange(File_num)
View(tmp)
tmp
tmp <- tmp[!duplicated(tmp), ] #%>%
View(tmp)
sss <-sum(as.numeric(tmp$y))
aaa <- tmp %>%
group_by(File_num) %>%
mutate(aa = sum(as.numeric(y))) %>%
select(c('File_num','aa'))
View(aaa)
aaa <- aaa[!duplicated(aaa), ]
View(aaa)
#packages
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
if(!require(tidyr)) install.packages('tidyr'); require(tidyr)
if(!require(tidyverse)) install.packages('tidyverse'); require(tidyverse)
if(!require(lubridate)) install.packages('lubridate'); require(lubridate)
#directory - R_code
print(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
# 00. environment -------------------------------------------------------------
#packages
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
if(!require(tidyr)) install.packages('tidyr'); require(tidyr)
if(!require(tidyverse)) install.packages('tidyverse'); require(tidyverse)
if(!require(lubridate)) install.packages('lubridate'); require(lubridate)
#directory - R_code
print(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Rdata load
load(file="../0.Data/N3_RData/total_data.Rdata")
View(total_df)
tmp01 <- total_df %>% select(c('File_num','Item_No','y_date','y'))
tmp01 <- tmp01[!duplicated(tmp01), ] %>%
arrange(File_num) %>%
filter(y=="1") %>%
mutate(before_Item_No = lag(Item_No), before_y_date = lag(y_date)) %>%
mutate(err = I(y_date - before_y_date < 48*60 & before_Item_No != Item_No))
#같은cell에서 2일 내에 연소가 발생한 경우는 삭제하지 않음 (J-V 3/14 & 3/15)
tmp01 <- tmp01 %>% filter(err==1)
Err_File_num <- tmp01$File_num
Err_Item_No <- tmp01$before_Item_No
for (i in 1:length(Err_File_num)){
total_df <- subset(total_df,File_num != Err_File_num[i]
| Item_No != Err_Item_No[i])
}
#data save
prep01_df <- total_df %>%
arrange(File_num,Item_No,Time)
save(prep01_df,file = "../0.Data/N3_RData/prep01_data.Rdata")
View(prep01_df)
prep02_df <- prep01_df %>%
#  arrange(File_num,Item_No,Time) %>%
group_by(File_num,Item_No) %>%
mutate(t = row_number())
View(prep01_df)
View(prep02_df)
prep02_df <- prep01_df %>%
arrange(File_num,Item_No,Time) %>%
group_by(File_num,Item_No) %>%
mutate(t = row_number()) %>%
ungroup
tmp <- prep01_df %>%
group_by(File_num,Item_No) %>%
summarise(n=n())
View(tmp)
which(tmp$n!=2881)
tmp_err <- tmp[which(tmp$n!=2881),]
tmp_err
View(tmp_err)
View(tmp01)
tmp02 <- prep01_df %>%
group_by(File_num,Item_No) %>%
summarise(n=n())
tmp02 <- tmp[which(tmp$n!=2881),]
tmp02
View(tmp02)
tmp02 <- prep01_df %>%
group_by(File_num,Item_No) %>%
summarise(n=n())
tmp02$err <- ifelse(tmp$n!=2881,TRUE,FALSE)
tmp02
tmp02 <- tmp02 %>% filter(err==1)
View(tmp02)
nrow(tmp02)
i<-1
tmp02[i,File_num]
tmp02[i,"File_num"
]
i<-1
prep02_df <- prep01_df %>%
filter(File_num!=tmp02[i,"File_num"]|Item_No!=tmp02[i,"Item_No"])
warnings()
i<-1
prep02_df <- prep01_df %>%
filter(File_num!=tmp02[i,"File_num"]|Item_No!=tmp02[i,"Item_No"])
View(tmp02)
i<-1
prep02_df <- prep01_df %>%
filter(File_num!=as.numeric(tmp02[i,"File_num"])|Item_No!=as.numeric(tmp02[i,"Item_No"]))
i<-2
prep02_df <- prep01_df %>%
filter(File_num!=tmp02[i,"File_num"]|Item_No!=tmp02[i,"Item_No"])
prep02_df <- merge(prep01_df,tmp02,by=c('File_num','Item_No'),all.x=TRUE)
View(prep02_df)
tmp02 %>% select(-'n')
